diff --git a/i2c_occ.cpp b/i2c_occ.cpp
index ffbb844..c364967 100644
--- a/i2c_occ.cpp
+++ b/i2c_occ.cpp
@@ -1,4 +1,5 @@
 #include <algorithm>
+#include <cassert>
 #include <fstream>
 
 #include "config.h"
@@ -13,9 +14,12 @@ namespace fs = std::experimental::filesystem;
 
 // The device name's length, e.g. "p8-occ-hwmon"
 constexpr auto DEVICE_NAME_LENGTH = 12;
+// The occ name's length, e.g. "occ"
+constexpr auto OCC_NAME_LENGTH = 3;
 
 // static assert to make sure the i2c occ device name is expected
 static_assert(sizeof(I2C_OCC_DEVICE_NAME) -1 == DEVICE_NAME_LENGTH);
+static_assert(sizeof(OCC_NAME) -1 == OCC_NAME_LENGTH);
 
 std::string getFileContent(const fs::path& f)
 {
@@ -63,6 +67,13 @@ void dbusToI2c(std::string& path)
 std::string getI2cDeviceName(const std::string& dbusPath)
 {
     auto name = fs::path(dbusPath).filename().string();
+
+    // Need to make sure the name starts with "occ"
+    assert(name.compare(0, OCC_NAME_LENGTH, OCC_NAME) == 0);
+
+    // Change name like occ_3_0050 to 3_0050
+    name.erase(0, OCC_NAME_LENGTH + 1);
+
     dbusToI2c(name);
     return name;
 }
diff --git a/occ_manager.hpp b/occ_manager.hpp
index 7bb1042..14b6d79 100644
--- a/occ_manager.hpp
+++ b/occ_manager.hpp
@@ -209,6 +209,7 @@ struct Manager
             for (auto& name : deviceNames)
             {
                 i2c_occ::i2cToDbus(name);
+                name = std::string(OCC_NAME) + "_" + name;
                 auto path = fs::path(OCC_CONTROL_ROOT) / name;
                 statusObjects.emplace_back(
                     std::make_unique<Status>(
